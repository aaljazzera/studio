بالتأكيد، يمكن إضافة إعدادات متنوعة لتطبيق قارئ القرآن. إليك كيفية التعامل مع إضافة الإعدادات والروايات المختلفة:

**1. مكان إضافة الإعدادات:**

*   **الشريط الجانبي (AppSidebar):** هذا هو المكان الأنسب لإعدادات العرض والتلاوة الشائعة، مثل اختيار الرواية، اختيار الترجمة (إذا أضفتها لاحقًا)، تغيير حجم الخط، ووضع العرض (صفحة/آية). لقد بدأنا بالفعل في وضع بعض الإعدادات هناك.
*   **صفحة إعدادات مخصصة:** للإعدادات الأكثر تفصيلاً أو الأقل استخدامًا، يمكنك إنشاء صفحة إعدادات منفصلة يمكن الوصول إليها من الشريط الجانبي أو القائمة العلوية.

**2. أنواع الإعدادات المقترحة:**

*   **اختيار الرواية (Riwaya):** هذا ما سألته عنه.
*   **اختيار الترجمة (Translation):** إذا كنت تخطط لدعم لغات متعددة أو ترجمات مختلفة.
*   **تفضيلات الخط:** نوع الخط (إذا أردت إضافة خيارات أخرى بجانب Cairo)، حجم الخط (موجود بالفعل).
*   **تفضيلات التلاوة الصوتية:** سرعة التشغيل، التكرار التلقائي للآيات/السور.
*   **المظهر:** الوضع الفاتح/الداكن (موجود بالفعل)، ألوان مخصصة.
*   **إعدادات التفسير (Tafsir):** إذا أضفت ميزة التفسير.

**3. إضافة الروايات (Riwayat):**

*   **ما هي الروايات؟** الروايات هي طرق مختلفة لنقل وقراءة القرآن الكريم، أشهرها رواية "حفص عن عاصم". توجد روايات أخرى مثل "ورش عن نافع"، "قالون عن نافع"، وغيرها.
*   **جلب بيانات الروايات:** يمكنك استخدام نقطة النهاية (endpoint) التي ذكرتها من واجهة برمجة تطبيقات mp3quran.net لجلب قائمة الروايات المتاحة:
    ```
    https://mp3quran.net/api/v3/riwayat?language=ar
    ```
    سيُرجع هذا عادةً قائمة بالروايات مع معرفاتها (IDs) وأسمائها.
*   **التسمية:** استخدم الأسماء التي توفرها واجهة برمجة التطبيقات (API) مباشرةً لعرضها للمستخدم. على سبيل المثال، قد تحصل على بيانات مثل:
    ```json
    { "id": 1, "name": "حفص عن عاصم" }
    { "id": 2, "name": "ورش عن نافع" }
    // ... وهكذا
    ```
    استخدم `name` ("حفص عن عاصم", "ورش عن نافع") في واجهة المستخدم.
*   **التنفيذ في التطبيق:**
    1.  **خدمة API (`mp3quran.ts`):** أضف وظيفة جديدة لجلب بيانات الروايات من الـ API.
    2.  **إدارة الحالة (`quran-store.ts`):** أضف متغير حالة جديد لتخزين الرواية المحددة (مثل `selectedRiwayaId`).
    3.  **واجهة المستخدم (`AppSidebar.tsx`):**
        *   أضف مكون `Select` جديد في الشريط الجانبي.
        *   استخدم `react-query` (أو `useEffect` بسيط) لجلب قائمة الروايات عند تحميل المكون.
        *   املأ قائمة `Select` بالروايات التي تم جلبها.
        *   عندما يختار المستخدم رواية، قم بتحديث الحالة في `quran-store`.
    4.  **ربطها باختيار القارئ:** الأهم هو أن **ليست كل الروايات متاحة لكل القراء**. عندما تختار قارئًا، فإن بيانات الـ API الخاصة به (ضمن `moshaf`) تحدد الروايات (المصاحف) المتاحة له.
        *   يجب **تحديث قائمة اختيار المصحف/الرواية** بناءً على القارئ المحدد. القائمة الحالية للمصاحف (`availableMoshafs`) هي في الواقع تمثل الروايات المتاحة *لهذا القارئ المحدد*. قد تحتاج إلى إعادة تسمية المتغيرات لتكون أوضح (مثل `availableRecitations` بدلاً من `availableMoshafs`).
        *   عند اختيار قارئ، قم بتصفية وعرض المصاحف/الروايات (`moshaf`) المتوفرة لهذا القارئ فقط.

**4. التعامل مع بيانات النص (`quran.txt`):**

*   إذا كانت الاختلافات بين الروايات نصية (وهو نادر جدًا في النص الأساسي ولكن قد يؤثر على علامات الوقف أو بعض الأحرف القليلة)، فقد تحتاج إلى:
    *   إما ملف `quran.txt` منفصل لكل رواية رئيسية تخطط لدعمها.
    *   أو تعديل بنية البيانات الحالية لتضمين اختلافات الروايات (وهذا أكثر تعقيدًا).
*   في البداية، يمكنك التركيز على رواية واحدة (مثل حفص) للنص المعروض، واستخدام إعداد الرواية بشكل أساسي **لاختيار التلاوة الصوتية الصحيحة** من القارئ المحدد.

**للبدء:**

1.  **حدد الإعدادات التي تريد إضافتها أولاً.** لنبدأ بـ "اختيار الرواية".
2.  **هل تحتاج إلى جلب قائمة الروايات بشكل منفصل؟** لا، لأن بيانات القارئ تتضمن بالفعل المصاحف/الروايات المتاحة له. يمكننا إعادة تسمية القائمة المنسدلة "المصحف" إلى "الرواية/المصحف" لتكون أوضح.

**هل ترغب في المضي قدمًا وتحديث قائمة "المصحف" لتكون أكثر وضوحًا بأنها تمثل الروايات المتاحة للقارئ المحدد، وربما إعادة تسميتها؟**